[{"C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\index.js":"1","C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\App.js":"2","C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\TopContainer.js":"3","C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\Utils.js":"4"},{"size":219,"mtime":1612213617566,"results":"5","hashOfConfig":"6"},{"size":6829,"mtime":1612264515117,"results":"7","hashOfConfig":"6"},{"size":1867,"mtime":1612231140809,"results":"8","hashOfConfig":"6"},{"size":3031,"mtime":1612238227941,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5hapxh",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"12"},"C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\index.js",[],["22","23"],"C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\App.js",["24"],"import './App.css';\nimport tw from 'twin.macro'\nimport TopContainer from './TopContainer'\nimport { useEffect, useState } from 'react';\n\nimport { Greedy, DP } from './Utils'\n\nfunction App() {\n\n  const [coinsList, setCoinsList] = useState([])\n  const [coin, setCoin] = useState(0)\n  const [target, setTarget] = useState(0)\n\n  const [greed, setGreed] = useState([])\n  const [greedStatistic, setGreedStatistic] = useState([0,0,0])\n  \n  \n  const [dp, setDP] = useState([])\n  const [dpStatistic, setDPStatistic] = useState([0,0,0])\n\n\n\n  useEffect(() => {\n    //let N = prompt(\"Please enter the upper limit value (N): \")\n  }, [])\n\n  const handleGreedy = () => {\n    let t0 = performance.now()\n    let res = Greedy(target, coinsList)\n    let t1 = performance.now()\n\n    let count = 0\n    let avgCoinUsage = 0\n    let time = t1-t0\n\n    res.forEach(e => {\n      if(e==-1){\n      } else {\n        count++\n        avgCoinUsage += e.length\n      }\n    });\n    setGreed(res)\n    let arr = []\n    arr.push(count/res.length)\n    arr.push(avgCoinUsage/count)\n    arr.push(time)\n    setGreedStatistic(arr)\n  }\n\n  const handleDP = () => {\n    let t0 = performance.now()\n    let res = DP(target, coinsList)\n    let t1 = performance.now()\n    let time = t1-t0\n\n    let count = 0\n    let avgCoinUsage = 0\n    \n    res.forEach(e=>{\n      if(e.length !== 0) {\n        count++\n        avgCoinUsage += e.length\n      }\n    })\n\n    let arr = []\n    arr.push(count/res.length)\n    arr.push(avgCoinUsage/count)\n    arr.push(time)\n    setDPStatistic(arr)\n\n    setDP(res)\n  }\n\n\n  return (\n    <Container>\n      <TopContainer />\n\n      <MainContainer>\n        <InputsContainer>\n          <CoinsContainer>\n            <Input type=\"number\" placeholder=\"coin\" value={coin} onChange={(e) => setCoin(e.target.value)} />\n            <Button onClick={() => setCoinsList([...coinsList].concat(coin))} >Add Coin</Button>\n          </CoinsContainer>\n\n          <CoinsContainer>\n            <Info>Current Coins List: [ {coinsList.toString()} ]</Info>\n          </CoinsContainer>\n\n          <CoinsContainer>\n            <Input type=\"number\" placeholder=\"target\" value={target} onChange={(e) => setTarget(e.target.value)} />\n            <Button onClick={() => setTarget(target)} >Set Target</Button>\n          </CoinsContainer>\n\n          <CoinsContainer>\n            <Info>Current Target (Upper Bound) : {target}</Info>\n          </CoinsContainer>\n        </InputsContainer>\n\n        <AlgorithmButtons>\n\n          <ButtonAlgol onClick={()=>handleGreedy()} >Calculate with Greedy Approach</ButtonAlgol>\n          <ButtonAlgol onClick={()=>handleDP()}>Calculate with DP Approach</ButtonAlgol>\n          ---\n          <ResetButton onClick={()=>window.location.reload(false)}>Reset All</ResetButton>\n\n        </AlgorithmButtons>\n\n        <StatisticContainer>\n          <Title>Statistics Table</Title>\n          <UnderContainer>\n            <Statistic>\n              <Title>Greedy</Title>\n              <Info>Success Ratio: {greedStatistic[0].toFixed(5)}</Info>\n              <Info>Avg. Coin Usage: {greedStatistic[1]}</Info>\n              <Info>Computation Time: {greedStatistic[2].toFixed(5)}</Info>\n            </Statistic>\n\n            <Statistic>\n              <Title>DP</Title>\n              <Info>Success Ratio: {dpStatistic[0].toFixed(5)}</Info>\n              <Info>Avg. Coin Usage: {dpStatistic[1]}</Info>\n              <Info>Computation Time: {dpStatistic[2].toFixed(5)}</Info>\n            </Statistic>\n          \n          </UnderContainer>\n\n        </StatisticContainer>\n\n\n      </MainContainer>\n\n      <CONTAINER>\n\n        <ResultContainer>\n          <Title>Greedy Approach</Title>\n          <ResultsTable>\n            <TableHead>\n              <TableRow>\n                <TableHeader>Value</TableHeader>\n                <TableHeader>Exchanging Coins</TableHeader>\n                <TableHeader>Length</TableHeader>\n              </TableRow>\n            </TableHead>\n\n            <ResultContainer>\n              {greed.map(g=>(\n                <TableRow>\n                  <TableData>{greed.indexOf(g)+1}</TableData>\n                  <TableData>{g.toString()}</TableData>\n                  <TableData>{g.length}</TableData>\n                </TableRow>\n              ))}\n            </ResultContainer>\n\n          </ResultsTable>\n        </ResultContainer>\n\n        <ResultContainer>\n          <Title>Dynamic Programming Approach</Title>\n          <ResultsTable>\n            <TableHead>\n              <TableRow>\n                <TableHeader>Value</TableHeader>\n                <TableHeader>Exchanging Coins</TableHeader>\n                <TableHeader>Length</TableHeader>\n              </TableRow>\n            </TableHead>\n\n            <ResultContainer>\n              {dp.map(g=>(\n                <TableRow>\n                  <TableData>{dp.indexOf(g)+1}</TableData>\n                  <TableData>{g.toString()}</TableData>\n                  <TableData>{g.length}</TableData>\n                </TableRow>\n              ))}\n            </ResultContainer>\n\n          </ResultsTable>\n        </ResultContainer>\n\n      </CONTAINER>\n\n    </Container>\n  );\n}\n\nconst Container = tw.div`font-sans`\n\nconst MainContainer = tw.div`flex justify-around mt-12 px-5 items-center`\n\nconst InputsContainer = tw.div`w-1/5 p-8 bg-gray-100 rounded-lg shadow ml-12 `\nconst CoinsContainer = tw.div`ml-8 mt-8 m-4 mb-6`\nconst Info = tw.div`mb-2`\n\nconst Button = tw.button`px-2 py-1 ml-3 font-bold text-white text-lg bg-gray-400 hover:bg-gray-500\n hover:cursor-pointer border-none rounded-lg focus:outline-none`\nconst Input = tw.input`rounded-lg p-2 focus:outline-none\nshadow rounded text-gray-700`\n\nconst AlgorithmButtons = tw.div`flex flex-col bg-gray-100 rounded-lg shadow ml-8 p-5 text-center font-bold`\nconst ButtonAlgol = tw.button`bg-green-500 border-none shadow mb-2 font-bold p-2 rounded-lg\ntext-lg text-white hover:bg-green-600 hover:cursor-pointer focus:outline-none`\nconst ResetButton = tw.button`bg-red-600 border-none shadow mb-2 font-bold p-2 rounded-lg\ntext-lg text-white hover:bg-red-500 hover:cursor-pointer focus:outline-none mt-2`\n\nconst StatisticContainer = tw.div`py-2 px-4 bg-gray-100 rounded-lg shadow w-1/4`\nconst UnderContainer = tw.div`flex justify-between`\nconst Statistic = tw.div`flex flex-col`\n\n\nconst CONTAINER = tw.div`flex justify-around ml-12 mt-12 mb-2 pl-5 w-4/5`\n\nconst Title = tw.h2`font-bold text-xl text-center mb-2`\n\nconst ResultContainer = tw.tbody``\nconst ResultsTable = tw.table`table-auto text-center`\nconst TableHead = tw.thead`bg-gray-200`\nconst TableHeader = tw.th`font-bold text-yellow-200 text-xl bg-gray-400 p-2 border-solid border-2 border-gray-300`\nconst TableRow = tw.tr`bg-gray-100 border-solid border-2 border-gray-300`\nconst TableData = tw.td`text-base items-start align-middle border-solid border-2 border-gray-300`\n\nexport default App;\n","C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\TopContainer.js",[],["25","26"],"C:\\Users\\hakki\\algorithm-final\\algorithm-final\\src\\Utils.js",["27","28","29","30"],"\r\n// getMapOfAnswers returns the object of answers as key, value (currency, count)\r\nfunction getMapOfAnswers(answers) {\r\n    let obj = {}\r\n    \r\n    answers.forEach(c => {\r\n        if (!obj[c]) {\r\n            obj[c] = 1\r\n        } else {\r\n            obj[c] = obj[c] + 1\r\n        }\r\n    })\r\n    obj[\"length\"] = answers.length\r\n    \r\n    return obj\r\n}\r\n\r\n// // GREEDY APPROACH\r\n// // Exchanges the target value by using the coins from the given currency list\r\nfunction findExchanged(Target, currencyList) {\r\n    currencyList.sort((a, b) => (a - b))\r\n\r\n    let answers = []\r\n    let n = currencyList.length\r\n\r\n    let i = n - 1\r\n    while (i >= 0) {\r\n        while (Target >= currencyList[i]) {\r\n            Target = Target - currencyList[i]\r\n            answers.push(currencyList[i])\r\n        }\r\n        i--\r\n    }\r\n\r\n    if (Target != 0) {\r\n        return -1 // means that this is not possible to change coins with the given coin set\r\n    } else {\r\n        return answers\r\n    }\r\n}\r\n\r\n// Greedy returns an array of objects that are containing i:{object of exchangingCoins}\r\nfunction Greedy(UpperLimit, currencylist) {\r\n    let arr = []\r\n    for (let i = 1; i <= UpperLimit; i++) {\r\n        let answer = findExchanged(i, currencylist)\r\n        //console.log(`${i} --> ${ans===-1 ? -1 : ans.length}`)\r\n        arr.push(answer)\r\n    }\r\n    return arr\r\n}\r\n//let cList = [2,3,5]\r\n//main(6, cList)\r\n\r\n// returns the smallest set of coins\r\nfunction smallestCoinsList(coins, target) {\r\n    const memory = Array(target + 1);\r\n    memory.fill(target + 1);\r\n    memory[0] = 0;\r\n\r\n    let exchangingCoins = {}\r\n    for (let i = 0; i < memory.length; i++) {\r\n        exchangingCoins[i] = [] // fill all of the cells with an empty array\r\n    }\r\n\r\n    for (let i = 1; i <= target; i++) {\r\n        for (let j = 0; j < coins.length; j++) {\r\n            if (coins[j] <= i) {\r\n                if (memory[i - coins[j]] + 1 < memory[i]) {\r\n                    let newSub = []\r\n                    newSub.push(coins[j])\r\n                    exchangingCoins[i] = newSub\r\n\r\n                    exchangingCoins[i] = exchangingCoins[i - coins[j]].concat(exchangingCoins[i])\r\n\r\n                }\r\n                memory[i] = Math.min(memory[i], memory[i - coins[j]] + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    return exchangingCoins[memory.length-1]\r\n}\r\n\r\nfunction DP(UpperLimit, currencylist) {\r\n    let arr = []\r\n    for (let i = 1; i <= UpperLimit; i++) {\r\n        let answer = smallestCoinsList(currencylist, i)\r\n        //console.log(`${i} --> ${ans===-1 ? -1 : ans.length}`)\r\n        arr.push(answer)\r\n    }\r\n    return arr\r\n}\r\n\r\nfunction totalOfArray(arr) {\r\n    let count = 0\r\n    arr.forEach(element => {\r\n        count += element\r\n    });\r\n\r\n    return count\r\n}\r\n\r\nfunction deleteSmallest(arr) {\r\n    let count = Infinity\r\n    arr.forEach(e => {\r\n        if (e < count) {\r\n            count = e\r\n        }\r\n    });\r\n    let index = arr.indexOf(count)\r\n    if (index > -1) {\r\n        arr.splice(index, 1)\r\n    }\r\n}\r\n\r\nexport {\r\n    Greedy, DP\r\n}\r\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":37,"column":11,"nodeType":"37","messageId":"38","endLine":37,"endColumn":13},{"ruleId":"31","replacedBy":"39"},{"ruleId":"33","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":25},{"ruleId":"35","severity":1,"message":"45","line":35,"column":16,"nodeType":"37","messageId":"38","endLine":35,"endColumn":18},{"ruleId":"41","severity":1,"message":"46","line":95,"column":10,"nodeType":"43","messageId":"44","endLine":95,"endColumn":22},{"ruleId":"41","severity":1,"message":"47","line":104,"column":10,"nodeType":"43","messageId":"44","endLine":104,"endColumn":24},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["48"],["49"],"no-unused-vars","'getMapOfAnswers' is defined but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","'totalOfArray' is defined but never used.","'deleteSmallest' is defined but never used.","no-global-assign","no-unsafe-negation"]